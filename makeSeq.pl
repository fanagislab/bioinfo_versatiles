#!/usr/bin/perl

=head1 Name

makeSeq.pl -- make random dna or protein seqeunce

=head1 Description

There are two main functions in this program:

(1) make a random DNA or protein sequence. The availabe options are
    "--type" and "--len".

(2) make random divergent offspring sequences for an ancestor sequence,
    the ancestor sequence could either be given by the input file, or
	randomly generated by function (1). The availabe options are
	"--offspring" and "--div" and "--num". If "--offspring" is provided, then the
	offspring sequences will be output.
	Note that in the divergence there is both muation and indel(insertion
	and deletion), their happening frequecy is 10:1.

=head1 Version

  Author: Fan Wei, fanw@genomics.org.cn
  Version: 2.0,  Date: 2007-12-26

=head1 Usage

   Usage: makeSeq.pl [options] [ancestor.fa]
   
   --type <str>		set type of the sequence, dna|pep, default=dna
   --len <num>		set length of the sequence, default=100
   
   --offspring      generated random divergent offspring sequences
   --div <num>		set divergency rate of the offspring sequences, default=0.1
   --num <num>		set number of offspring sequences, default=10
   
   --verbose   output running progress information to screen  
   --help      output help information to screen  

=head1 Exmple

  (1) make some random sequences: 
      perl ./makeSeq.pl 
      perl ./makeSeq.pl --type pep  --len 500
      perl ./makeSeq.pl -off
      perl ./makeSeq.pl -off --div 0.05 --num 20
      
  (2) take BMB000001 protein as ancestor, and genrate divergent offspring sequences:  
      perl ./makeSeq.pl -off --div 0.05 --num 20  test-data/BMB000001-PA.fa

=cut


use strict;
use Getopt::Long;

my %opts;
GetOptions(\%opts, "type:s","len:i","div:s","num:i","offspring!",,"help!");
$opts{type} ||= "dna";
$opts{len} ||= 100;
$opts{div} ||= 0.1;
$opts{num} ||= 10;
die `pod2text $0` if (defined($opts{"help"}));

####################################################
################# Main  Function ###################
####################################################

my $ancestor_file = shift;

my $seq; ##store the ancestor sequence
my $seq_name; ## store the prefix of sequence name
my @div; #store the divergent sequences

#make random seq or read from file
if(-f $ancestor_file){
	Read_fasta($ancestor_file,\$seq,\$seq_name);
}else{
	$seq_name = "seq";
	$seq=make_seq($opts{type},$opts{len}); 
}

##output the result
if (! exists $opts{offspring}) {
	my $str = $seq;
	Display_seq(\$str); 
	print ">$seq_name\n".$str;
}else{
	make_div_seq($opts{type},$seq,\@div,$opts{div},$opts{num});
	my $loop;
	foreach  (@div) {
		my $seq=$_;
		Display_seq(\$seq); 
		$loop++;
		print ">".$seq_name."_".$loop."    [offspring num:$opts{num} div:$opts{div}]\n".$seq;		
	}
}


####################################################
################# Main  Function ###################
####################################################



#make a random DNA sequence with specified length
#################################################
sub make_seq{
	my $type = shift || "dna"; ## dna or protein
	my $len=shift || 300;
	
	my @base;
	if($type eq 'dna'){
		@base = ("A","G","C","T"); 
	}
	elsif($type eq 'pep'){
		@base = ('A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y');
	}
	else{
		die "Please choose the right sequence type, dna or pep\n";
	}

	my $str;
	for (my $i=0; $i<$len; $i++) {
		my $order=int rand(scalar(@base));
		$str.=$base[$order];
	}
	return $str;
}


## make diversity sequences of the ancestor sequences
## according to a specified rate
#########makeDiversitySquence########
sub make_div_seq{
	my $type = shift || "dna";
	my $str=shift; #store ancestor sequence
	my $out_ap=shift; #store output in array
	my $div=shift || 0.1; #diversity rate
	my $num=shift || 10; #number of output sequences
	
	my $len=length($str);

	my @base;
	if($type eq 'dna'){
		@base = ("A","G","C","T","A","G","C","T","A","G","C","T","A","G","C","T","A","G","C","T","","-"); ## "" stand for deletion, "-" stand for insertion 
	}
	elsif($type eq 'pep'){
		@base = ('A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y',"","-"); ## "" stand for deletion, "-" stand for insertion 
	}
	else{
		die "Please choose the right sequence type, dna or pep\n";
	}

	for (my $i=0; $i<$num; $i++) {
		my $seq=$str;
		for (my $j=0; $j< int($len*$div); $j++) {
			my $pos=int rand(length($seq));
			my $sub1=substr($seq,0,$pos);
			my $sub2=substr($seq,$pos,1);
			my $change;
			do{
				$change=$base[int rand(scalar(@base))];

			}until($sub2 ne $change);
			
			if ($change eq "-") { ## insert a random base
				$sub2 .= $base[int rand(@base-2)];
			}else{
				$sub2=$change; ## mutation and deletion
			}
			
			my $sub3=substr($seq,$pos+1,$len-$pos-1);
			$seq=$sub1.$sub2.$sub3;	
		}
		push (@$out_ap,$seq);
	}

}
#########makeDiversitySquence########


#display a sequence in specified number on each line
#usage: disp_seq(\$string,$num_line);
#		disp_seq(\$string);
#############################################
sub Display_seq{
	my $seq_p=shift;
	my $num_line=(@_) ? shift : 50; ##set the number of charcters in each line
	my $disp;

	$$seq_p =~ s/\s//g;
	for (my $i=0; $i<length($$seq_p); $i+=$num_line) {
		$disp .= substr($$seq_p,$i,$num_line)."\n";
	}
	$$seq_p = ($disp) ?  $disp : "\n";
}
#############################################


sub Read_fasta {
	my $file = shift;
	my $seq_p = shift;
	my $name_p = shift;
	
	open IN, $file || die "fail open $file";
	$/=">"; <IN>; $/="\n";
	while (<IN>) {
		$$name_p=$1 if(/^(\S+)/);
		$/=">";
		$$seq_p = <IN>;
		chomp $$seq_p;
		$$seq_p=~s/\s//g;
		$/="\n";
		last;
	}	
	close IN;
}
